        -:    0:Source:dijkstra.cpp
        -:    0:Graph:dijkstra.gcno
        -:    0:Data:dijkstra.gcda
        -:    0:Runs:12
        -:    1:#include <bits/stdc++.h>
        -:    2:using namespace std;
        -:    3:
        -:    4:typedef pair<int, int> iPair;
        -:    5:
       12:    6:void addEdge(vector<pair<int, int>> adj[], int u, int v, int wt) {
       12:    7:    adj[u].push_back(make_pair(v, wt));
       12:    8:    adj[v].push_back(make_pair(u, wt));
       12:    9:}
        -:   10:
        2:   11:void shortestPath(vector<pair<int, int>> adj[], int V, int src) {
        2:   12:    priority_queue<iPair, vector<iPair>, greater<iPair>> pq;
        4:   13:    vector<int> dist(V, INT_MAX);
        -:   14:
        2:   15:    pq.push(make_pair(0, src));
        2:   16:    dist[src] = 0;
        -:   17:
       14:   18:    while (!pq.empty()) {
       12:   19:        int u = pq.top().second;
       12:   20:        pq.pop();
        -:   21:
       40:   22:        for (auto x : adj[u]) {
       28:   23:            int v = x.first;
       28:   24:            int weight = x.second;
        -:   25:
       28:   26:            if (dist[v] > dist[u] + weight) {
       10:   27:                dist[v] = dist[u] + weight;
       10:   28:                pq.push(make_pair(dist[v], v));
        -:   29:            }
        -:   30:        }
        -:   31:    }
        -:   32:
        2:   33:    cout << "Vertex\tDistance from Source\n";
       11:   34:    for (int i = 0; i < V; ++i)
        9:   35:        cout << i << "\t\t" << dist[i] << "\n";
        2:   36:}
        -:   37:
       12:   38:int main() {
        -:   39:    int V, E;
       12:   40:    cout << "Enter number of vertices: ";
       12:   41:    cin >> V;
       12:   42:    if (V <= 0) {
        3:   43:        cerr << "Number of vertices must be positive.\n";
        3:   44:        return 1;
        -:   45:    }
        -:   46:
       84:   47:    vector<iPair> adj[V];
        -:   48:
        9:   49:    cout << "Enter number of edges: ";
        9:   50:    cin >> E;
        9:   51:    if (E < 0) {
        2:   52:        cerr << "Number of edges cannot be negative.\n";
        2:   53:        return 1;
        -:   54:    }
        -:   55:
        7:   56:    cout << "Enter edges in the format: u v weight\n";
       19:   57:    for (int i = 0; i < E; ++i) {
        -:   58:        int u, v, wt;
       16:   59:        cin >> u >> v >> wt;
       16:   60:        if (u < 0 || u >= V || v < 0 || v >= V) {
        2:   61:            cerr << "Invalid vertex number.\n";
        4:   62:            return 1;
        -:   63:        }
       14:   64:        if (wt < 0) {
        2:   65:            cerr << "Edge weights must be non-negative.\n";
        2:   66:            return 1;
        -:   67:        }
       12:   68:        addEdge(adj, u, v, wt);
        -:   69:    }
        -:   70:
        -:   71:    int src;
        3:   72:    cout << "Enter source vertex: ";
        3:   73:    cin >> src;
        3:   74:    if (src < 0 || src >= V) {
        1:   75:        cerr << "Invalid source vertex.\n";
        1:   76:        return 1;
        -:   77:    }
        -:   78:
        2:   79:    shortestPath(adj, V, src);
        -:   80:
        2:   81:    return 0;
       54:   82:}
